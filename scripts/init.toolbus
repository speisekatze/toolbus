import uuid
import platform
import requests
import psutil
import subprocess
import time
import os

def call(command, sleep_time=0):
    p = subprocess.Popen(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    r = p.wait()
    time.sleep(sleep_time)
    return r

def callc(command, sleep_time=0):
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    r = p.wait()
    time.sleep(sleep_time)
    return p.communicate()

def change_pw(user, passw):
    p = subprocess.Popen(['passwd', user], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p.stdin.write((passw+'\n').encode())
    p.stdin.flush()
    p.stdin.write((passw+'\n').encode())
    p.stdin.flush()
    l = p.communicate()
    return p.wait()

def get_home_dir(user):
    return callc(['getent', 'passwd', user])[0].decode('ascii').split(':')[5]

def stage_ip(data):
    profile_name = data['options']['netctl_profile']
    filename = '/etc/netctl/' + profile_name
    f = open(filename, 'w')
    f.write(data['payload'])
    f.close()
    call(['netctl', 'switch-to', profile_name], 5)
    call(['netctl', 'store'])

def stage_hostname(data):
    hostname = data['options']['hostname']
    call(['hostnamectl', 'set-hostname', hostname], 5)

def stage_ssh(data):
    users = data['payload']
    for u in users:
        r = call(['id', u['name']])
        if r != 0:
            print('adding ' + u['name'])
            call(['useradd', '-m', '-s', '/bin/bash', '-U', '-G', 'wheel', '-d', '/home/'+ u['name'], u['name']])
        change_pw(u['name'], u['passwd'])
        h = get_home_dir(u['name'])
        path = h + '/.ssh/'
        os.makedirs(path, exist_ok=True)
        filename = path + 'authorized_keys'
        f = open(filename, 'a')
        f.write(u['sshpub'])
        f.close()
    #print(users)

def stage_rke(data):
    c = ['docker', 'run'] + data['payload'].split(' ')
    
    print(c)
    x = callc(c, 5)
    print(x)
    exit()

def stage_default(data):
    print(data)

stages = {
    'ip': {'f': stage_ip},
    'hostname': {'f': stage_hostname},
    'ssh': {'f': stage_ssh},
    'rke': {'f': stage_rke}
}

def get_f(stage):
    if stage not in stages:
        return stage_default
    return stages[stage]['f']

def get(url):
    r = requests.get(url)
    data = {}
    if r.status_code == 200:
        data = r.json()
    return data

mac = '%012x' % uuid.getnode()
hostname = platform.node()
addrs = psutil.net_if_addrs()
ifname = ''
for i in addrs:
    for x in addrs[i]:
        if int(x[0]) == 17 and x[1].replace(':', '') == mac:
            ifname = i            


url = f'%%proto%%://%%host%%:%%port%%/%%stage%%?mac={mac}&host={hostname}'
data = get(url)

while 'url' in data:
    new_url = data['url'].format(mac=mac, hostname=hostname, ifname=ifname)
    print(new_url)
    data = get(new_url)
    whatever = get_f(data['stage'])(data)
    

